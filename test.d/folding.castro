/*
 * some constant folding
 */

var pp[15] @100;

switch sw01 @14 {
    -XXX
}

macro ma01 @50 {

    a = 1 + 3 + 5 + a;  // no fold
    b  = 3 + 4;
    c  = 3 + s_FK_f0;
    d  = 3 + 4 + a;     // no fold
    e = &pp[z];         // no fold
    f = &pp[&b];

    g = &z;
    h = &pp;

    x  = s_FK_f0 + s_FK_f0;
    y  = s_FK_f0 + s_FK_f0 + s_FK_f0 + s_FK_f0 - 2 * (s_FK_f0 + s_FK_f0);
    z = &pp[10];

    a = maddr(ma01);
    b = maddr(ma01) + 3;
    c = saddr(sw01) + 3;

    d = Sw2KC(sw01) + 3;

    e = ~23 + 1;

    1 + 2;

    + 7;
    - 7;
    ~ 7;
    ! 7;
    ! 0;
    
    x = + 7;
    x = - 7;
    x = ~ 7;
    x = ! 7;
    x = ! 0;

    + (2 + 7);
    - (2 + 7);
    ~ (2 + 7);
    ! (2 + 7);
    ! (0 + 0);
    
    x = + (2 + 7);
    x = - (2 + 7);
    x = ~ (2 + 7);
    x = ! (2 + 7);
    x = ! (0 + 0);

}

// binop +/- optimization
macro ma02 @51 {
    a = 1 + j + k;
    a = -1 + j + k;

    x = a + 1 + b + 2 + c + 3;
    a = k - (2 - 3) + 4;

    a = k - (m && 3) + l - 7 -6;
    a = k * (31 + (301 + 302) + 33) + 4 + 5;
    a = k - 2 * 3 + 4;

    a = 2 + (d + 2 + 1 ? e + 3 + 2 : f + 4 + 3) + 3 + k + 4 ;
    a = k + (l + 31 + (301 + 302) + 33) + 4 + 5;
    a = k + (31 + l * (m + 301 + 302) + 33) + 4 + 5;

    x = a + 2 + (0xf02 & 0x0f2) + 3 + c + 4;
    // The next two show how '&' is NOT reorder optimized
    x = a + 2 + (0xf02 & 0x0f2 & f) + 3 + c + 4;
    x = a + 2 + (f & 0xf02 & 0x0f2) + 3 + c + 4;
}


