@   ; Compiled for Astrolog v7.60
    ; Generated by castro v0.5 on Fri, 7 Jul 2023 19:08:10 -0700

=== MACRO test_isolated_value(12)
input: *r;
    [astroExprStatement] INDIR r
input: +3;
    [astroExprStatement] u+ 3
input: a+b;
    [astroExprStatement] + a b
input: 13 + 11;
    [astroExprStatement] + 13 11
input: !a;
    [astroExprStatement] ! a
input: !(a + b);
    [astroExprStatement] ! + a b
input: !a + b;
    [astroExprStatement] + ! a b
input: ~a;
    [astroExprStatement] ~ a
input: ~(a + b);
    [astroExprStatement] ~ + a b
input: ~a + b;
    [astroExprStatement] + ~ a b
input: a & b << c + d;
    [astroExprStatement] & a << b + c d
input: (a & b) << c + d;
    [astroExprStatement] << & a b + c d

=== MACRO test_assignment(11)
input: a = p;
    [astroExprStatement] = a p
input: q = p[3];
    [astroExprStatement] = q INDEX p 3
input: q = *p;
    [astroExprStatement] = q INDIR p
input: *r = q;
    [astroExprStatement] = INDIR r q
input: p = &q;
    [astroExprStatement] = p ADDR q
input: p = &q + 7;
    [astroExprStatement] = p + ADDR q 7
input: *p = &q + 7;
    [astroExprStatement] = INDIR p + ADDR q 7
input: p = a + b;
    [astroExprStatement] = p + a b
input: *p = c + d;
    [astroExprStatement] = INDIR p + c d
input: a = b * - c;
    [astroExprStatement] = a * b u- c
input: a = b * + c;
    [astroExprStatement] = a * b u+ c

=== MACRO test_function(12)
input: f();
    [astroExprStatement] FUNC(0) f 
input: f(a);
    [astroExprStatement] FUNC(1) f a 
input: f(a, b);
    [astroExprStatement] FUNC(2) f a b 
input: f(a, b, c);
    [astroExprStatement] FUNC(3) f a b c 
input: f(a, b+c, d);
    [astroExprStatement] FUNC(3) f a + b c d 
input: f(a+b);
    [astroExprStatement] FUNC(1) f + a b 
input: f(a+b, b);
    [astroExprStatement] FUNC(2) f + a b b 
input: f(a, b, c+b);
    [astroExprStatement] FUNC(3) f a b + c b 
input: a = f();
    [astroExprStatement] = a FUNC(0) f 
input: a = f(a, b+c, d) + g(x, y);
    [astroExprStatement] = a + FUNC(3) f a + b c d  FUNC(2) g x y 
input: a = f(a, b+c, g(x,y) + z);
    [astroExprStatement] = a FUNC(3) f a + b c + FUNC(2) g x y  z 
input: a = f(a, b+c, g(x,y) + h(z));
    [astroExprStatement] = a FUNC(3) f a + b c + FUNC(2) g x y  FUNC(1) h z  

=== MACRO test_block(1)
input: { a = b; c = d;}
    [astroExprStatement] BLOCK(2) = a b = c d 

=== MACRO test_if_else(12)
input: if(a) b;
    [astroExprStatement] IF a b
input: if(a) b else c;
    [astroExprStatement] IF a b ELSE c
input: if(a) {b;c;}
    [astroExprStatement] IF a BLOCK(2) b c 
input: if(a) {b;c;} else {d;e;}
    [astroExprStatement] IF a BLOCK(2) b c  ELSE BLOCK(2) d e 
input: if(a) b;
    [astroExprStatement] IF a b
input: if(c) d else e;
    [astroExprStatement] IF c d ELSE e
input: if(a) if(c) d else e;
    [astroExprStatement] IF a IF c d ELSE e
input: if(a) b else if(c) d;
    [astroExprStatement] IF a b ELSE IF c d
input: if(a) {b;} else if(c) {d;}
    [astroExprStatement] IF a BLOCK(1) b  ELSE IF c BLOCK(1) d 
input: if(a) {b;} else { if(c) d; }
    [astroExprStatement] IF a BLOCK(1) b  ELSE BLOCK(1) IF c d 
input: if(a+b) c += d else {e; f;}
    [astroExprStatement] IF + a b += c d ELSE BLOCK(2) e f 
input: z = if(a+b) c += d else {e; f;}
    [astroExprStatement] = z IF + a b += c d ELSE BLOCK(2) e f 

=== MACRO test_quest_colon(6)
input: a ? b : d ? d : e ? f : g;
    [astroExprStatement] ?: a b ?: d d ?: e f g   
input: a ? b : c() + d ? e : f ? g : h;
    [astroExprStatement] ?: a b ?: + FUNC(0) c  d e ?: f g h   
input: a ? b : c ? d() + e : f ? g : h;
    [astroExprStatement] ?: a b ?: c + FUNC(0) d  e ?: f g h   
input: x = a ? b : d ? d : e ? f : g;
    [astroExprStatement] = x ?: a b ?: d d ?: e f g   
input: x = a ? b : c() + d ? e : f ? g : h;
    [astroExprStatement] = x ?: a b ?: + FUNC(0) c  d e ?: f g h   
input: x = a ? b : c ? d() + e : f ? g : h;
    [astroExprStatement] = x ?: a b ?: c + FUNC(0) d  e ?: f g h   

=== MACRO test_control_expressions(6)
input: for(a = b+c; d+e) f += a;
    [astroExprStatement] FOR a <== + b c UNTIL + d e += f a
input: while(a) b;
    [astroExprStatement] WHILE a b
input: while(a) {b;c;}
    [astroExprStatement] WHILE a BLOCK(2) b c 
input: do a while(b);
    [astroExprStatement] DO_WHILE a b
input: do {a; b;} while(c);
    [astroExprStatement] DO_WHILE BLOCK(2) a b  c
input: repeat(x + y) {a;b;}
    [astroExprStatement] REPEAT + x y BLOCK(2) a b 

=== MACRO test_complex_expressions(14)
input: if(a) {b;}
    [astroExprStatement] IF a BLOCK(1) b 
input: if(c) {d;}
    [astroExprStatement] IF c BLOCK(1) d 
input: if(a) {b;}
    + if(c) {d;}
    [astroExprStatement] IF a + BLOCK(1) b  IF c BLOCK(1) d 
input: if(a) {b;};
    [astroExprStatement] IF a BLOCK(1) b 
input: + if(c) {d;}
    [astroExprStatement] u+ IF c BLOCK(1) d 
input: x[3+4] = *y + while(a[3] < x) b+=c;
    [astroExprStatement] = INDEX x + 3 4 + INDIR y WHILE < INDEX a 3 x += b c
input: do {a; b;} while(c);
    [astroExprStatement] DO_WHILE BLOCK(2) a b  c
input: + while(a) b;
    [astroExprStatement] u+ WHILE a b
input: do a while(b) + 33;
    [astroExprStatement] + DO_WHILE a b 33
input: + do a while(b) + 33;
    [astroExprStatement] + u+ DO_WHILE a b 33
input: do {a; b;} while(c) + while(a) b;
    [astroExprStatement] + DO_WHILE BLOCK(2) a b  c WHILE a b
input: a += b + {  c;  d;  }
    [astroExprStatement] += a + b BLOCK(2) c d 
input: q = (while(a[3] < x) b+=c);
    [astroExprStatement] = q WHILE < INDEX a 3 x += b c
input: q = b += c + for(p=3; 5) h;
    [astroExprStatement] = q += b + c FOR p <== 3 UNTIL 5 h

=== MACRO test_multiple_control_expressions(4)
input: q = while(a[3] < x) b += c + for(p=3; 5) h;
    [astroExprStatement] = q WHILE < INDEX a 3 x += b + c FOR p <== 3 UNTIL 5 h
input: q = (while(a[3] < x) b += c) + for(p = 3; 5) h;
    [astroExprStatement] = q + WHILE < INDEX a 3 x += b c FOR p <== 3 UNTIL 5 h
input: q = while(a[3] < x) b += c;
    [astroExprStatement] = q WHILE < INDEX a 3 x += b c
input: for(p = 3; 5) h += 3;
    [astroExprStatement] FOR p <== 3 UNTIL 5 += h 3
