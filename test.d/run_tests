#!/bin/bash

CMD=${0##*/}
DIR=${0%/*}

. $DIR/TEST_COMMON

#set -e

TESTS="
    assignments
    const
    folding
    blocks
    check-allowed-switch-expression
    expr
    inc-dec
    initialization
    run
    special-func
    switch
    unary-ops
    log-ops
    macro_functions
    warnings
    errors-1
    errors-2
    errors-3
    errors-4
    errors-5
    errors-6
    errors-oom
"

usage() {
    echo "$CMD [-l] [-h] [--clean] [files]*"
    echo "    -l    list files tested by default, then exit"
    echo "    --clean   rm .as, .def, .map files for defualt test list"
    echo "    -h    output this message"

    exit 1
}

declare TEMP
#TEMP=$(getopt -o "w:s"
TEMP=$(getopt -o "hl" \
    --long 'clean' \
    -n "$CMD" -- "$@")
if [[ $? -ne 0 ]]; then usage > /dev/stderr; fi
eval set -- "$TEMP"
unset TEMP

typeset -i cleanflag
typeset -i lflag
while true
do
    case "$1" in
        -l) lflag=1;                                shift   ;;
        --clean) cleanflag=1;                       shift   ;;
        -h) usage                                           ;;
        --) shift
            break
            ;;
        *) echo Internal Error "'$1'"; exit 1   ;;
    esac
done

if ((lflag))
then
    echo $TESTS
    exit
fi

declare -a files=($@)
nFiles=${#files[@]}

if ((nFiles == 0))
then
    files=($TESTS)
fi
nFiles=${#files[@]}

declare -a files_stderr=($TESTS_STDERR)

# Running the tests from their directory, gives nice short names.
cd $DIR

Main() {
    tcastro --version
    run_all
}

typeset -A error_tests
typeset -A error_files

#
# current_test global
#
run_all() {
    for t in ${files[@]}
    do
        current_test=${t%.castro}
        run_test
    done

    if ((${#error_tests[@]} != 0))
    then
        echo "FAIL: ${!error_tests[@]}"
        echo "FAIL_DIFF: ${!error_files[@]}"
    fi
}

run_test() {
    if ((cleanflag))
    then
        rm -f $current_test.as $current_test.def $current_test.map \
            $current_test.stderr $current_test.test
        return
    fi

    echo === running $t
    tcastro  $current_test.castro 2> $current_test.stderr
    check_result
}

check_result() {
    check_one as
    check_one def
    # out of memory test does not produce a map file.
    # Only check map if there's a map somewhere for this test
    if [[ -e $current_test.map || -e gold/$current_test.map-gold ]]
    then
        check_one map
    fi
    check_one stderr
}

check_one() {
    local ext=$1

    #echo "CHECKING: $1"
    if ! diff gold/$current_test.$ext-gold $current_test.$ext
    then
        echo "FAIL: diff gold/$current_test.$ext-gold $current_test.$ext"
        error_tests+=($current_test)
        error_files+=($current_test.$ext)
    fi
}

# return true if $1 array contains $2
# NOTE: $1 is a reference to the array.
contains() {
    local -n array=$1
    local val=$2
    local i
    local found=1 # which means not found
    for i in ${array[@]}
    do
        if [[ $i == $val ]]
        then
            found=0
            break;
        fi
    done
    return $found
}

#echo "check foo"
#if contains files foo
#then
#    echo "    found"
#else
#    echo "    notfound"
#fi
#
#echo "check warnings"
#if contains files warnings
#then
#    echo "    found"
#else
#    echo "    notfound"
#fi

Main "$@"
