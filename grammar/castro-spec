MODEL/INTRO
===========
The model is that Astrolog's AstroExpression and command switch
language is a machine language;
it is a stack based, precedence/parenthesis free language.
"castro" is a compiler that compiles a simplified "C" like language to
AstroExpression; its language definition is taylored to Astrolog and
AstroExpression.
For example, everything, including "while", "if", "for" is an expression
that has a value.

For building castro, there is a script which extracts information about
AstroExpression functions from the Astrolog source file express.cpp;
this information is used to validate function usage during complication.
There is no way to get equivelent information for command switches.

==============================================================================
Examples:
    last example in AstroExpression, using expr as command argument.
    =R "~=b 0 For %a 0 Objs If ObjOn @a Do =b @a =a Objs @b"
    =R {~ b=0; for(a=0;Objs()) if(ObjOn(a)) { b=a; a;=Objs(); } b; }

==============================================================================
Warnings/Oddities:

- The functions "=Obj" and "=Hou" can cause problems, for example
  "a==Obj(...)" is parsed as "a == Obj(...)", write "a= =Obj(...)"
  or use "a=AssignObj(...)"

- "{~" introduces an AstroExpression whose result is used as a parameter to
  a command switch, for example "=R {~ a+b; }". But "{ ~ a+b; }" has a space
  between '{' and '~' and is different, it parses as "{ (~a) + b; }"

- ';' ends an expression. Beware a missing ';'. Consider
    macro ex1 { a += 3; -3; }   // add 3 to "a", return -3.
  and
    macro ex2 { a += 3 -3; }    // add 0 to "a", like "a += (3 - 3)", return "a".
  and
    macro ex3 { (a += 3) -3; }  // add 3 to "a", subtract 3 from result, returns original "a"

  Use the "--parseoutput", producing a "*.parse"
  file, to explicitly see how expressions are parsed

  Here's a complex example.
    macro ex4 { repeat(3) { a += 1; }; -3; }
  and
    macro ex5 { repeat(3) { a += 1; } -3; }
  ex1 and ex4 are basically the same. ex4 

  A predence/parenthesis free language can be nice:)



==============================================================================


Possible syntax other than AstroExpression
==========================================

macro, switch, run, copy


/////////////////////////////////////////////////////////////////////////////

copy { copy lines to output, use \} to include a right curly brace }


/////////////////////////////////////////////////////////////////////////////

macro name [ @addr ] {
}

/////////////////////////////////////////////////////////////////////////////

switch name [ @addr ] {

    cmd {~ AstroExpression as switch command argument }
    ~cmd { AstroExpression }
}
    Specifying the address is optional.
    In a switch, "~0" is a special case.

    TODO: ~2 HANDLING


/////////////////////////////////////////////////////////////////////////////

run { ... }

    Just like switch, but output at top level. Not part of any "-M0" definition.
    
/////////////////////////////////////////////////////////////////////////////

include filename;       // maybe most usefull to include memory maps
                        // for prev/exist memory {...}

// The layouts specify "keep out"/"don't allocate";
// they apply to automatic allocation.
// Manually allocated addresses in these regions are allowed.
// TODO: warn if manual allocation in a reserved area

// NOTE: In a layout, the reserve areas may overlap
layout memory {
    base <addr>;    // start automatic allocation here.
    stack <addr>;   // reserved for future use. Stack grows higher.
    limit <addr>;   // don't allocate this location or higher.
    reserve <addr>, <addr>, <addr_lower>:<addr_upper_exclusive>, ...;
}
layout macro {
    base <addr>;     // start automatic allocation here.
    reserve <addr>, <addr>, <addr_lower>:<addr_upper_exclusive>, ...;
}

var name;                   // declare variable foo
var name {expr};            // declare variable foo, initialize it
var name @<addr>;           // declare foo at specified address
var name [<size>];          // declare an array
var name [<size>] {e1, e2}; // declare an array, initialize
var name [] {e1, e2};       // declare an array size of initialization
var name [<size>] @<addr>   // declare an array at specified address

macro name { astroExpression+ }
macro name @<addr> { astroExpression+ }



==============================================================================


