/*
 * Portions created by Ernie Rael are
 * Copyright (C) 2023 Ernie Rael.  All Rights Reserved.
 *
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is jvi - vi editor clone.
 *
 * Contributor(s): Ernie Rael <errael@raelity.com>
 */

package com.raelity.astrolog.castro;

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;

import com.raelity.astrolog.castro.antlr.AstroLexer;
import com.raelity.astrolog.castro.antlr.AstroParser;

import static java.nio.file.StandardOpenOption.CREATE;
import static java.nio.file.StandardOpenOption.TRUNCATE_EXISTING;
import static java.nio.file.StandardOpenOption.WRITE;

/** Given an input and output file name,
 * check/setup paths/files; setup parser with inputFile's stream.
 * The output name is typically null, and gets derived from the input name.
 * @return null if OK, else error message.
 */
public class CastroIO
{

private static String runDate;
/** All output files from this run have the same header. */
static void outputFileHeader(PrintWriter out, String commentLeader)
{
    if(runDate == null)
        runDate = ZonedDateTime.now().format(DateTimeFormatter.RFC_1123_DATE_TIME);
                //ZonedDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME));
                //LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME));
    // Leave space for a "@", written if no compiler errors.
    out.printf("    %s Compiled for Astrolog v7.60\n", commentLeader);
    out.printf("    %s Generated by castro %s on %s\n", commentLeader, "v0.5", runDate);
}

// These are bridge methods to replace the old CastroOut record
public PrintWriter pw() { return outputWriter; }
public String baseName() { return baseName; }
public Path outDir() { return outDir; }
public String inFile() { return inFile; }
private final String inFile;


private String status;
private Path outDir = null;
private Path outPath = null;
private String baseName = null;
private PrintWriter outputWriter;
private CharStream input;
private boolean doAbort;
private boolean isDiskFile;
private AstroParseResult apr;

public CastroIO(String inFileName, String outFileName, boolean isTest)
{
    this.inFile = inFileName;
    status = setupIO(inFileName, outFileName, isTest);
}

/** @return error message, null if no error */
public String getErrorMsg() { return status; }
public Path getOutDir() { return outDir; }
public Path getOutPath() { return outPath; }
public String getBaseName() { return baseName; }
public PrintWriter getOutputWriter() { return outputWriter; }
public boolean isDiskFile() { return isDiskFile; }
/** @return true if there was an exception */
public boolean isAbort() { return doAbort; }
public AstroParseResult getApr() { return apr; }

/** 
 * Re-open the output file and write the "@" marker indicating no errors.
 * Without the "@", Astrolog barfs on the file.
 */
@SuppressWarnings("UseOfSystemOutOrSystemErr")
public void markSuccess()
{
    if(isDiskFile()) {
        try (OutputStream ch = Files.newOutputStream(getOutPath(), WRITE)) {
            ch.write('@');
        } catch(IOException ex) {
            ex.printStackTrace(System.err);
        }
    }
}


@SuppressWarnings(value = "UseOfSystemOutOrSystemErr")
private String setupIO(String inFileName, String outFileName, boolean isTest)
{
    AstroParser parser = new AstroParser(null);
    AstroLexer lexer;
    if("-".equals(inFileName))
        inFileName = null;
    // TODO: check for identical files (not just name)
    if(inFileName != null && inFileName.equals(outFileName))
        return "infile and outfile can not be the same file";
    // TODO: if inName not found, try inName.castro
    if("-".equals(outFileName))
        outFileName = null;
    else if(outFileName == null && inFileName != null) {
        // Pick outFile built from inFile
        String base = inFileName;
        if(inFileName.endsWith(Castro.IN_EXT))
            base = inFileName.substring(0, inFileName.lastIndexOf(Castro.IN_EXT));
        outFileName = base + (isTest ? Castro.OUT_TEST_EXT : Castro.OUT_EXT);
        baseName = base;
    }
    try {
        Path tinPath = null;
        if(inFileName != null) {
            tinPath = Path.of(inFileName);
            if(!Files.exists(tinPath))
                return String.format("input file '%s' does not exist",
                                     inFileName);
        }
        if(outFileName != null)
            outPath = Path.of(outFileName);
        outputWriter = outPath == null ? new PrintWriter(System.out, true)
                       : new PrintWriter(Files.newBufferedWriter(
                               outPath, WRITE, TRUNCATE_EXISTING, CREATE));
        if(outPath != null && Files.isRegularFile(outPath)) {
            isDiskFile = true;
            outDir = outPath.getNameCount() > 1
                     ? outPath.getParent() : Path.of("");
        }
        input
                = tinPath != null ? CharStreams.fromPath(tinPath)
                : CharStreams.fromStream(System.in);
    } catch(IOException ex) {
        String msg = String.format("%s: %s\n", ex.getClass().getSimpleName(),
                                   ex.getMessage());
        Util.lookup(Castro.CastroErr.class).pw().print(msg);
        doAbort = true;
        return null;
    }
    lexer = new AstroLexer(input);
    parser.setTokenStream(new CommonTokenStream(lexer));
    apr = AstroParseResult.get(parser, lexer, input);
    return null;
}
    
}
