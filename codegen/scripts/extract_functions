#!/usr/bin/bash

CMD=${0##*/}
DIR=${0%/*}

ASTROLOG_ROOT=/ref/tools/astrolog.d/Astrolog
SRC_FILE=$ASTROLOG_ROOT/express.cpp

extract() {
    #{funFalse, "False", 0, I_},
    grep '^{fun' $SRC_FILE \
        | sed -E 's/\{fun\w+,\s+(".*"),\s+([0-9]),\s+(\w+).*$/    add(\1, \2, "\3");/'

    #   | sed -E 's/\{fun\w+,\s+(".*"),\s+([0-9]).*$/    funcs.put(\1, \2);/'
    #   | grep -E -v 'False|True|Add|Sub|Mul|Div|Mod|Neg|
}

cat <<"CODE"
/* Copyright © 2023 Ernie Rael. All rights reserved */

// This file is generated by a script: scipts/extract_functions
// from astrolog's express.cpp which is copyrighted by:
// Walter D. Pullen (Astara@msn.com, http://www.astrolog.org/astrolog.htm)

package com.raelity.astrolog.castro.tables;

import java.util.Collections;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;

public class Functions
{

/** @return number of arguments for func; null if func does not exist */
public static Integer narg(String funcName)
{
    Info info = functions.funcs.get(funcName.toLowerCase(Locale.ROOT));
    return info != null ? info.narg : null;
}

public static String name(String funcName)
{
    Info info = functions.funcs.get(funcName.toLowerCase(Locale.ROOT));
    return info != null ? info.name : null;
}

private static final Functions functions = new Functions();
private Map<String, Info> funcs;


private Functions() {
    // ~500 items, 700 entries, load-factor .72
    funcs = new HashMap<>(700);
    createEntries();
    // Provide "evaluate both sides" semantics for "?:" if wanted.
    add("QuestColon", 3, "E_IEE");
    funcs = Collections.unmodifiableMap(funcs);
}

    private static class Info
    {
    /** correct case */
    final String name;
    final int narg;
    
    public Info(String name, int nargs)
    {
        this.name = name;
        this.narg = nargs;
    }
    
    }

/** key is lower case. Save original name and nargs. */
private void add(String funcName, int narg, String types)
{
    Objects.nonNull(types);
    funcs.put(funcName.toLowerCase(Locale.ROOT), new Info(funcName, narg));
}

private void createEntries()
{
CODE

extract

cat <<"CODE"
}

}
CODE

exit

#{funFalse, "False", 0, I_},
grep '^{fun' $SRC_FILE \
    | sed -E 's/\{fun\w+,\s+(".*"),\s+([0-9]),\s+(\w+).*$/    add(\1, \2, "\3");/'

#   | sed -E 's/\{fun\w+,\s+(".*"),\s+([0-9]).*$/    funcs.put(\1, \2);/'
#   | grep -E -v 'False|True|Add|Sub|Mul|Div|Mod|Neg|




/* Copyright © 2023 Ernie Rael. All rights reserved */

// This file is generated by a script: scipts/extract_functions

package com.raelity.astrolog.castro.tables;

import java.util.Collections;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;

public class Functions
{
private Functions() { }

private static Map<String, Integer> funcs = null;

/** @return number of arguments for func; null if func does not exist */
public static Integer narg(String funcName)
{
    if(funcs == null) {
        // ~500 items, 700 entries, load-factor .72
        funcs = new HashMap<>(700);
        createEntries();
        // Provide "evaluate both sides" semantics for "?:" if wanted.
        add("QuestColon".toLowerCase(Locale.ROOT), 3, "E_IEE");
        funcs = Collections.unmodifiableMap(funcs);
    }
    return funcs.get(funcName.toLowerCase(Locale.ROOT));
}

private static void add(String funcName, int narg, String types)
{
    Objects.nonNull(types);
    funcs.put(funcName.toLowerCase(Locale.ROOT), narg);
}

private static void createEntries()
{
