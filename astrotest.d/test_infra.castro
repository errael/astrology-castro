/*
 * Simple test infrastructure for running tests under Astrolog.
 *
 * Usage
 *      Do "macro(check)" after setting expect/result and test_name.
 *      Either PASS or FAIL is output along with info.
 *
 * Example output. Note that expect/result are only output on fail.
 *      PASS: test_do_while_5: 5-25
 *      FAIL: test_force_fail: expect: 321 result: 123
 *
 * Vars
 *      expect
 *      result
 *
 * Strings
 *      test_name[0] - name of running test. example: "test_do_while_5"
 *      test_name[1] - sub test name.        example: ": 5-25"
 */

layout memory { base 100; limit 150; }
layout macro { base 100; limit 150; }
layout switch { base 100; limit 150; }

var cprintf_save_area[10];

var expect;
var result;
var test_name[2];

// expect/result are moved to a/b
// c/d are set up to point to the test_name strings

// return true for pass, false for fail
macro check {
    c = &test_name; d = &test_name + 1;

    a = expect;
    b = result;
    expect == result ? switch(pass) : switch(fail);
    expect == result;
}

switch pass {
    -YYT "PASS: \c\d\n"
}
switch fail {
    -YYT "FAIL: \c\d: expect: \A result: \B\n"
}

// these are for trivial debug trace

switch mark1 { -YYT "MARK-1\n" } 
switch mark2 { -YYT "MARK-2\n" } 
switch mark3 { -YYT "MARK-3\n" } 
switch mark4 { -YYT "MARK-4\n" } 
switch mark5 { -YYT "MARK-5\n" } 


