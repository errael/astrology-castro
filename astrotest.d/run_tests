#!/bin/bash

CMD=${0##*/}
DIR=${0%/*}

# NOTE: with the following commented out, the public castro is used.
#. $DIR/../test.d/TEST_COMMON

set -e

ASTROLOG=/junk/install/astrolog.d/base/astrolog

astrolog() {
    # "-." exits with 2, so use "-n"
    $ASTROLOG "$@" -n
}

INFRA_MAP=infra_testing
INFRA_OUTPUT=infra_results
INFRA_FILES="
    ignore_case
    castro_constants
    astrolog_constants
    expressions
    logical_ops
    macro_functions
    flow_control
    functions
    test_infra
    main
"

PRINTF_MAP=printf_testing
PRINTF_OUTPUT=printf_results
PRINTF_FILE=cprintf

usage() {
    echo "$CMD [-h] [--clean]"
    echo "    --clean   rm .as, .def, .map files"
    echo "    -h    output this message"

    exit 1
}

declare TEMP
TEMP=$(getopt -o "h" \
    --long 'clean' \
    -n "$CMD" -- "$@")
if [[ $? -ne 0 ]]; then usage > /dev/stderr; fi
eval set -- "$TEMP"
unset TEMP

typeset -i cleanflag
while true
do
    case "$1" in
        --clean) cleanflag=1;                       shift   ;;
        -h) usage                                           ;;
        --) shift
            break
            ;;
        *) echo Internal Error "'$1'"; exit 1   ;;
    esac
done

typeset -i nErrors

declare -a infra_files=($INFRA_FILES)

# Running the tests from their directory, gives nice short names.
cd $DIR


Main() {
    if ((cleanflag))
    then
        clean
        return
    fi

    run_all

    if ((nErrors))
    then
        echo 
        echo "Total error count: $nErrors"
        exit 1
    fi
}

typeset -A error_tests
typeset -A error_files

run_all() {
    castro --ver
    run_infra_tests
    run_printf_tests
}

clean() {
    rm -f ${infra_files[@]/%/.as} ${infra_files[@]/%/.def} ${infra_files[@]/%/.map}
    rm -f $INFRA_MAP.map $INFRA_OUTPUT

    rm -f $PRINTF_FILE.as $PRINTF_FILE.def $PRINTF_FILE.map
    rm -f $PRINTF_OUTPUT $PRINTF_OUTPUT-2 $PRINTF_OUTPUT-3
}

run_echo() {
    echo "$@" > /dev/tty
    "$@"
}

report_errors() {
    if (($1))
    then
        echo
        echo "============================================================="
        echo "                   FAIL: $2: $1 errors"
        echo "============================================================="
        echo
    fi
}

run_printf_tests() {
    run_echo castro $PRINTF_FILE.castro

    date > $PRINTF_OUTPUT
    run_echo astrolog -i $PRINTF_FILE.as >> $PRINTF_OUTPUT
    date >> $PRINTF_OUTPUT

    grep PRINT $PRINTF_OUTPUT | tee $PRINTF_OUTPUT-2

    diff gold/$PRINTF_FILE.output-gold $PRINTF_OUTPUT-2 | tee $PRINTF_OUTPUT-3
    local -i i=$(cat $PRINTF_OUTPUT-3 | wc -l)
    report_errors $i printf
    (( nErrors += i ))
    #(( nErrors += $(cat $PRINTF_OUTPUT-3 | wc -l) ))
}

run_infra_tests() {

    run_echo castro --mapname=$INFRA_MAP ${infra_files[@]/%/.castro}

    date > $INFRA_OUTPUT
    temp=(${infra_files[@]/%/.as})
    run_echo astrolog ${temp[@]/#/-i } >> $INFRA_OUTPUT
    date >> $INFRA_OUTPUT

    grep -E 'PASS|FAIL' $INFRA_OUTPUT

    if grep -q FAIL $INFRA_OUTPUT
    then
        local -i i=$(grep FAIL $INFRA_OUTPUT | wc -l)
        report_errors $i infra
        ((nErrors += i))
        #((nErrors += $(grep FAIL $INFRA_OUTPUT | wc -l) ))
    fi
}

Main
