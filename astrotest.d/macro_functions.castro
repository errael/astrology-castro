/*
 * Test macro functions
 */

layout memory { base 500; limit 550; }
layout macro { base 500; limit 550; }
layout switch { base 500; limit 550; }

switch test_macro_functions {
    ~1 {
        Switch(test_simple_macro_function);
        Switch(test_nested_macro_function);
        Switch(test_external_macro_function);
        Switch(test_more_nested_macro_function);
    }

    // Uncomment the following to see what failure output looks like
    // ~1 { Switch(test_force_fail); }
}

macro mafu1(mafu1a, mafu1b) {
    mafu1a + mafu1b;
}


switch test_simple_macro_function {
    SetString test_name[0] "test_simple_macro_functions"

    SetString test_name[1] ": (param1, param2): a + b"
    ~1 { result = mafu1(4, 3); expect = 7; macro(check); }

    SetString test_name[1] ": manual: a + b"
    ~1 {
        mafu1a = 9;
        mafu1b = 8;
        result = Macro(mafu1); expect = 17; macro(check);
    }
}

macro mafu2(mafu2a, mafu2b) {
    mafu2a + mafu2b;
}

macro mafu3(mafu3a, mafu3b) {
    mafu1(mafu3a, mafu3b);
}

switch test_nested_macro_function {
    SetString test_name[0] "test_nested_macro_functions"

    SetString test_name[1] ": mafu2(mafu1(a,b), mafu1(c,d))"
    ~1 { result = mafu2(mafu1(3, 4), mafu1(103, 104)); expect = 214; macro(check); }
    // >>>>>>>    ^^ using mafu1 here fails <<<<<<<<

    SetString test_name[1] ": mafu1(a,b) + mafu1(c,d)"
    ~1 { result = mafu1(3, 4) + mafu1(103, 104); expect = 214; macro(check); }

    SetString test_name[1] ": mafu3(mafu1(a,b), mafu1(c,d)): mafu3 uses mafu1"
    ~1 { result = mafu3(mafu1(3, 4), mafu1(103, 104)); expect = 214; macro(check); }
}

switch test_external_macro_function {
    SetString test_name[0] "test_external_mafu"

    SetString test_name[1] ": external macro function"
    ~1 { result = mafu4(5, 7, 9); expect = 21; macro(check); }
}

macro mafu5(mafu5a) {
    mafu5a * 3;
}

macro mafu6(mafu6a) {
    mafu6a * 4;
}

macro mafu7(mafu7a) {
    mafu7a + 5;
}

switch s2 {
    ~1 {
        mafu5(mafu6(mafu7(3)));
    }
}

switch test_more_nested_macro_function {
    SetString test_name[0] "test_more_nested_macro_functions"

    SetString test_name[1] ": m5(m6(m7(2)))"
    ~1 { result = mafu5(mafu6(mafu7(2))); expect = 84; macro(check); }

    SetString test_name[1] ": m7(m6(m5(2)))"
    ~1 { result = mafu7(mafu6(mafu5(2))); expect = 29; macro(check); }
}
