/*
 * cprintf test
 * To run this one test (without comparing to gold)
 *      castro cprintf.castro
 *      astrolog -i cprintf.as
 * The lines starting with "PRINTF" are the results to check.
 *
 * See gold/cprintf.output-gold
 */

var str1[4];
var v1 {11};
var v2 {8};

/*
 * Put some values in the temp area used by cprintf,
 * to verify save/restore of this memory.
 */
var a {551};
var b {552};
var c {553};
var d {554};
var e {555};

/*
 * Declare this so that cprintf does save/restore of temp area.
 * Experiment: comment out the following, recompile, note original values lost.
 */
var cprintf_save_area[10];

run { setstring str1[0] "string-1" "string-2" "string-3" "string-4" }

switch printf_example {

    cprintf "PRINTF-1: %d %f %d %s\n" {~ v1 - v2; v1; v1 + v2; &str1; }
    cprintf "PRINTF-2: no args\n"

    // printfs that end up on one output line, the newline flushes
    cprintf "PRINTF-3: "
    cprintf " %d" {~ v1 + v2; }
    cprintf " %d" {~ v1; }
    cprintf " %d" {~ v1 - v2; }
    cprintf "\n"

    cprintf "PRINTF-4: %s %s %s %s\n"
                    {~ &str1; &str1 + 1; &str1 + 2; &str1 + 3; }

    // output the original area using astrolog builtins.
    -YYT "PRINTF-5: a=\A b=\B c=\C d=\D e=\E\n" 

    cprintf "PRINTF-6: a=%d b=%d c=%d d=%d e=%d\n" {~ a; b; c; d; e; }
}

macro macro_printf_example() {
    cprintf("mPRINTF-1: %d %f %d %s\n", v1 - v2, v1, v1 + v2, &str1);
    cprintf("mPRINTF-2: no args\n");

    // printfs that end up on one output line, the newline flushes
    cprintf("mPRINTF-3: ");
    cprintf(" %d", v1 + v2);
    cprintf(" %d", v1);
    cprintf(" %d", v1 - v2);
    cprintf("\n");

    cprintf("mPRINTF-4: %s %s %s %s\n",
            &str1, &str1 + 1, &str1 + 2, &str1 + 3);
    cprintf("mPRINTF-4a: %s %s %s %s\n",
            &str1[0], &str1[1], &str1[2], &str1[3]);

    cprintf("mPRINTF-6: a=%d b=%d c=%d d=%d e=%d\n", a, b, c, d, e);
}

macro macro_printf_example2() {
    v1 = "string v1";
    v2 = "string v2";
    cprintf("mPRINTF-7 %d %s %d %s\n", v1, &v1, v2, &v2);
}



run { ~1 { Switch(printf_example); } }
run { ~1 { macro_printf_example(); } }
run { ~1 { macro_printf_example2(); } }

