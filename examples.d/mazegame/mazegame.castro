/*
 * For Astrolog 7.70
 *
 * Do 
 *      castro mazegame.castro
 *      astrolog -i mazegame.helper.as
 *
 * To start mazegame using the vi bindings to move around the maze:
 *      castro mazegame.castro vi.castro
 *      astrolog -i mazegame.helper.as
 *
 * Tested on linux and Windows.
 */

copy {
; This is a port to castro of "mazegame.as" from Astrolog:
; https://github.com/CruiserOne/Astrolog/blob/master/mazegame.as
}

// Astrolog 7.70, switch commands after FKeys.

/*
 * The maze starting memory address.
 */
const MAZE_MEM {70};

/*
 * Limit automatic variable allocation. By setting this limit,
 * there's an error if auto alloc runs out of space and into the maze mem.
 */
layout memory { limit MAZE_MEM; }

/** Start macro allocation somewhere random for no reason */
layout macro { base 23; }

/*
 * maze is a giant array, far bigger than 2, goes to the end of memory
 *
 * The maze is a square, width/height given by var "c",
 * maze[x + y * c] (maze[x,y], but no 2 dimensional arrays)
 *      0 - a wall
 *      1 - a path
 */
var maze[2] @MAZE_MEM;

/*
 * variable usage:
 *
 *      a - left/right current position (some guesses, especially 'e','f','h')
 *      b - up/down current position
 *      c - width/height, in "blocks", of maze (maze is square)
 *      d - size of next maze to draw, double to get width height in blocks
 *      g - counter based on "d" used for create_paths
 *      f, h - nPixels related to a block size.
 *      e - f * 2
 *
 *      FREE: i,j
 *
 *      k - one-shot flag, clear it to give welcome message
 *      l - one-shot flag, clear it to report time and finished message
 *
 *      FREE: m,n,o,p,q,r,s
 *
 *      t - time fresh maze is drawn and game play starts
 *      u - when finished maze, used to calculate how long it took
 *
 *      v, w - temps: in pixels, for drawing a block (maybe block center?)
 *      x, y - temps: block index y/x. Often index in nested for loop scan
 */

var cprintf_save_area[10]; // avoid cprintf changing variables

const SecondsPerDay { 86400 };

/*
 * The maze is navigated by pressing keys for up/left/down/right.
 * There are multiple sets of keys for navigation, e.g. wasd and hjkl.
 * "cur_nav_idx" indicates which set of keys to use; it is an index
 * into the nav_info array.
 */
run { ~1 { cur_nav_idx = 0; } }

/*
 * Initialize lookup tables for navigation, both wasd and vi.
 */
var nav_info[] { &nav_wasd_keys[0], &nav_vi_keys[0] };


/*
 * Initialize associated messages.
 * Note that number/strings can occupy the same location at the same time;
 */
run {
    SetString nav_wasd_keys[0] 'w/a/s/d'
    SetString nav_vi_keys[0]   'h/j/k/l'
}

switch welcome @1 {
    // insure a valid cur_nav_idx, won't change if valid
    ~1 { set_cur_nav_idx(cur_nav_idx); }

    cprintf 'Welcome to Astrolog Mazes! (castro):)\nUse %s keys to move the dot through the Maze to the finish.\n\nPress F1 to display this help text.\nPress F2 to create new Maze.\nPress F3 to create smaller Maze.\nPress F4 to create larger Maze.\nPress F5 to restart current Maze.\nPress F6 to change naviation keys.\n'
        {~ nav_keys_addr(); }

    // cprintf 'Welcome to Astrolog Mazes! (castro):)\n'
    // cprintf 'Use %s keys to move the dot through the Maze to the finish.\n\n'
    //         {~ nav_keys_addr(); }
    // cprintf 'Press F1 to display this help text.\n'
    // cprintf 'Press F2 to create new Maze.\n'
    // cprintf 'Press F3 to create smaller Maze.\n'
    // cprintf 'Press F4 to create larger Maze.\n'
    // cprintf 'Press F5 to restart current Maze.\n'
    // cprintf 'Press F6 to change naviation keys.\n'
}

switch new_maze   @2  { -n ~1 { solid_maze(); create_paths(); } }
switch smaller    @3  { ~1 { if (d > 1) d -= 1; Switch(new_maze); } }
switch larger     @4  { ~1 { if (d < 25) d += 1; Switch(new_maze); } }
switch restart    @5  { -n ~1 { a = 1; b = 0; k = 0; } }

// change UI nav keys
switch nav_keys @6 {
    ~1 {
        set_cur_nav_idx(cur_nav_idx + 1);
    }
    cprintf 'Current keys %s.\n' {~ nav_keys_addr(); }
}

/*
 * Set the current nav index. For example, might change between "wasd"/"hjkl".
 */
macro set_cur_nav_idx(cur_nav_idx) {
    // the index may need to be wrapped
    cur_nav_idx %= sizeof(nav_info);
}
/*
 * Return the address of the current navigation keys.
 */
macro nav_keys_addr() {
        nav_info[cur_nav_idx];
}

// Needed to workaround 7.70 issue; this uses a function key slot.
switch sw_cast_chart @48 { ~1 { n = n; } }

// This is needed with 7.70 because running a function key is how to
// signal that the chart should be cast which adjusts the current time.
// The next release of Astrolog, according to Walter, will have a
// specific "z" value which indicates that a chart should be cast.
macro cast_chart() {
    // Run a no-op macro to get the fCast.
    if(!WIN()) {
        z = Sw2KC(sw_cast_chart);
    } else {
        z = 40195; // cmdMacro48 on 770
    }
}

// The nav keys locations are automatically allocated
macro left()  { a -= 1; if (z_is_wall()) a += 1; cast_chart(); }
macro right() { a += 1; if (z_is_wall()) a -= 1; cast_chart(); }
macro up()    { b -= 1; if (z_is_wall()) b += 1; cast_chart(); }
macro down()  { b += 1; if (z_is_wall()) b -= 1; cast_chart(); }

switch exit_move  { -n -n1 ~1 { l = 0; } }

switch report_done {
    ~1 { u = Int((JulianT() - t) * (SecondsPerDay * 100)); }
    cprintf 'Congratulations, you made it through the Maze in %d.%d seconds! :)\n\n'
            {~ u / 100; Int(u % 100); }
    cprintf 'Have an a-Maze-ing day! :)\n'
}

switch hourglass { _Wh }

macro draw_maze() {
    DCol(K_Green);
    for (y = 0; c - 1)
        for (x = 0; c - 1) {
            v = h + x * e;
            w = h + y * e;
            if (!maze[y * c + x])
                DBlock(v - f, w - f, v + f - 1, w + f - 1);
        }
}

macro solid_maze() {
    c = d * 2 + 1;
    g = d * d - 1;
    t = k ? JulianT() : Tim();
    s = RndSeed(Fract(t * 10000.0) * 10000.0);
    for (y = 0; c - 1)
        for (x = 0; c - 1)
            maze[y * c + x] = 0;
}

macro create_paths() {
    a = 1; b = 1;
    maze[b * c + a] = 1;
    while (g)
        create_paths_A();
    maze[1] = 1;
    a = c - 2; b = c - 1;
    z_is_wall();
    *z = 1; // path now at this spot
    a = 1; b = 0;
}

macro create_paths_A() {
    r = Rnd(0, 3);
    x = a; y = b;
    if (Odd(r)) {
        x += r <= 1 ? 2 : -2;
    } else {
        y += r <= 0 ? 2 : -2;
    }
    if (Tween(x, 0, c - 1) & Tween(y, 0, c - 1))
        create_paths_B();
}

macro create_paths_B() {
    z = &maze[y * c + x];
    if (!*z) { // a wall
        *z = 1; // clear the wall
        maze[((y + b) >> 1) * c + ((x + a) >> 1)] = 1;
        g -= 1;
    }
    a = x; b = y;
}

/*
 * Check if a,b position is a wall
 *
 * SideEffect:
 *      - z is set to &maze[a,b]
 *      - if up_down_pos >= height then exit
 * Return True if z position is a wall.
 */
macro z_is_wall() {
    if (b >= c)
        Switch(exit_move);
    z = &maze[b < 0 ? 0 : b * c + a];
    !*z;
}

run {
    ~Q2 {   // Chart has just been displayed
        f = (Min(_Xwx(), _Xwy()) - 1) / (d * 12) + 1;
        e = f * 2;
        h = (Min(_Xwx(), _Xwy()) - (c - 1) * e) / 2;
        // draw "my" position
        DCol(K_Red);
        v = h + a * e;
        w = h + b * e;
        DDisk(v - f, w - f, v + f - 1, w + f - 1);
        draw_maze();
    }
}
run {
    ~Q3 {   // Chart has just been displayed and updated
        if (!k) {
            k = 1;
            Switch(welcome);
            t = JulianT();
        }
        if (!l) {
            l = 1;
            Switch(report_done);
        }
    }
}

run {
    ~XQ {
        lookup_run_nav();
    }
    ~WQ {
        lookup_run_nav();
    }
}

/*
 * Key press lookup tables for wasd or vi.
 * Note: linux/windows is embedded in KeyC.
 */
var nav_wasd_keys[] { KeyC('w'), KeyC('a'), KeyC('s'), KeyC('d') };
var nav_vi_keys[]   { KeyC('k'), KeyC('h'), KeyC('j'), KeyC('l') };

/*
 * The navigation operations. Correspond 1-1 with nav_*_keys.
 */
var nav_ops[] { MAddr(up), MAddr(left), MAddr(down), MAddr(right) };

/*
 * Search for "z" (the key) in "nav_info[cur_nav_idx]" (the current key table).
 * Execute the corresponding navigation operation macro.
 */
macro lookup_run_nav() {
    o = nav_keys_addr();
    q = o + 3;
    for(p = o; q) {
        if(z == *p) {
            Macro(nav_ops[p - o]);  // run op with index for found key
            p = q; // break
        }
    }
}

run {
    ~1 { d = 10; f = 5; l = 1; if (WIN()) Switch(hourglass); }
    =b0 =Xe
    ~1 { Switch(new_maze); }
}

