/*
 * Compile this file and, in almost all cases, 
 * note that the AstroExpression examples on the
 * Website have the same code as castro generates.
 * Some of the examples here show multiple implementations.
 *
 * Compile:
 *      castro --Ewarn=array-oob astroExpressionDocsCommandSwitches.castro
 * or for output with minimal number of lines
 *      castro --Ewarn=array-oob --fo=min astroExpressionDocsCommandSwitches.castro
 * and compare astroExpressionDocsCommandSwitches.as to the website examples.
 * The --Ewarn=array-oob is necessary because
 *      SetString d "Apple" "Banana" "Carrot"
 * produces an error/warning because the variable d is only one element,
 * and it is being treated like a multi-element array.
 *
 * This file, and it's output, should be examined side by side with the
 * AstroExpression website docs from which it is derived to understand
 * the associated "hook".
 *
 * Each example in the file is like
 *
 *      ///////////////////////////////////////////////
 *      // ~ <string>: Name of AstroExpr command switch.
 *      // Comment/description of the example
 *      //     "~ 'Sqr Div 9.0 4.0'"        <<<<<<<< code from the website
 *      run { ~ { Sqr(9.0 / 4.0); } }       <<<<<<<< castro code for the example
 *
 * (the "Age of Aquarius" is probably my favorite example
 * (for historical reasons))
 */


///////////////////////////////////////////////////////////////////////////////
// ~ <string>: Display AstroExpression.
//     "~ 'Sqr Div 9.0 4.0'"
run { ~ { Sqr(9.0 / 4.0); } }

///////////////////////////////////////////////////////////////////////////////
// ~g <string>: Filter aspect configurations.
// For example, to only display grand crosses and grand trines, do:
//     ~g "Or Equ @v 1 Equ @v 4"
run { ~g { (v == 1) | (v == 4); } }

///////////////////////////////////////////////////////////////////////////////
// ~a <string>: Adjust aspect powers.
// For example, to triple the power of any aspect involving an object in the
// sign Sagittarius, do:
//      ~a "If Or Equ LonSign ObjLon @w S_Sag Equ LonSign ObjLon @y S_Sag =z Mul @z 3"
run { ~a { if((LonSign(ObjLon(w)) == S_Sag) | (LonSign(ObjLon(y)) == S_Sag)) z *= 3; } }

///////////////////////////////////////////////////////////////////////////////
// ~a0 <string>: Notify aspect list summary.
// For example, if you animate a bunch of aspect list charts, you can keep
// track of the highest total power displayed (i.e. store it in custom
// variable @a) with:
//      ~a0 "If Gt @z @a =a @z"
run { ~a0 { if(z > a) a = z; } }

///////////////////////////////////////////////////////////////////////////////
// ~m <string>: Filter midpoints.
// For example, to only display midpoints located within 30 degrees of the
// Sun’s position, do:
//      ~m "Lt LonDist @y ObjLon O_Sun 30.0"
run { ~m { LonDist(y, ObjLon(O_Sun)) < 30.0; } }

///////////////////////////////////////////////////////////////////////////////
// ~ma <string>: Filter aspects to midpoints.
// For example, to only display tight aspects to the Sun or Moon, do:
//      ~ma "And Lt Abs @z 2.0 Lte @y O_Moo"
// TODO: z is orb, can be negative
run { ~ma { (Abs(z) < 2.0) & (y <= O_Moo); } }

///////////////////////////////////////////////////////////////////////////////
// ~j <string>: Adjust object influence powers.
// For example, to give an extra 100 power to completely unaspected planets, do:
//      ~j "=n 0 For %i 0 Objs If And Neq @i @x Neq GridNam Min @i @x Max @i @x 0 =n Inc @n If Lte @n 0 =z Add @z 100.0"
run { ~j {
    n = 0;
    for(i = 0; Objs()) { if(i != x & GridNam(Min(i, x), Max(i, x)) != 0) n += 1; }
    if(n <= 0) z += 100;
} }

///////////////////////////////////////////////////////////////////////////////
// ~j0 <string>: Adjust sign influence powers.
// For example, to give an extra 200 relative power to fire signs, do:
//      ~j0 "If Equ Mod @y 4 1 =z Add @z 200.0"
run { ~j0 { if((y % 4) == 1) z += 200.0; } }

///////////////////////////////////////////////////////////////////////////////
// ~7 <string>: Notify Ray chart.
// For example, if you animate a bunch of esoteric charts, you can keep track
// of the count of each possible personality Ray in custom variables
// @a through @g with:
//      ~7 " =u %y = Var @u Inc Var Var @u"
run { ~7 { *y += 1; } }             // ~7 "= @y Inc Var @y" 
run { ~7 { u = y; *u += 1; } }      // ~7 "=u @y = @u Inc Var @u" 
// The accumulated values can be kept in rays[1] through rays[7]
var rays[8];
run { ~7 { rays[y] += 1; } }           // ~7 "= Add 27 @y Inc Var Add 27 @y" 
run { ~7 { p = &rays[y]; *p += 1; } } // ~7 "=p Add 27 @y  = @p Inc Var @p" 

///////////////////////////////////////////////////////////////////////////////
// ~L <string>: Filter latitude crossings.
// For example, to only display latitude crossings involving the Ascendant
// that are within 10 degrees of the current chart’s latitude do:
//     ~L "And Lt Abs Sub @v Lat1 10 Or Equ @x O_Asc Equ @z O_Asc"
run { ~L { Abs(v - Lat1()) < 10 & (x == O_Asc | z == O_Asc); } }

///////////////////////////////////////////////////////////////////////////////
// ~E <string>: Filter ephemeris output.
// For example, to do a stellium search and only display ephemeris lines in
// which there are at least 5 planets in the same sign, do:
//     astrolog -n -Ey ~E "For %m 1 Signs = @m 0 For %m 0 Objs If ObjOn @m = LonSign ObjLon @m Inc Var LonSign ObjLon @m =n 0 For %m 1 Signs =n Max @n Var @m Gte @n 5"
run { -n -Ey ~E {
    for(m = 1; Signs) *m = 0;
    for(m = 0; Objs())
        if(ObjOn(m)) {
            p = LonSign(ObjLon(m));
            *p += 1;
        }
    n = 0;
    for(m = 1; Signs) n = Max(n, *m);
    n >= 5;
} }

///////////////////////////////////////////////////////////////////////////////
// ~P <string>: Filter Arabic parts.
// For example, to only display parts that lie in the 10th house, do:
//     ~P "Equ LonHouse @z 10"
run { ~P { LonHouse(z) == 10; } }

///////////////////////////////////////////////////////////////////////////////
// ~Zd <string>: Filter rising and setting times.
// For example, to only show rising events within 10 degrees of due East, do:
//     ~Zd "And Equ @y 0 Lt LonDist @z 0.0 10.0"
run { ~Zd { y == 0 & LonDist(z, 0.0) < 10.0; } }

///////////////////////////////////////////////////////////////////////////////
// ~d <string>: Filter transit to transit events.
// For example, to display eclipses for this year (at least those in effect
// when corresponding aspect is exact) do:
//     astrolog -n -dy =Yu ~d "Gt @y 0"
run { -n -dy =Yu ~d { y > 0; } }

///////////////////////////////////////////////////////////////////////////////
// ~dv <string>: Determine void of course times.
// For example, to detect and display void of course Sun times (i.e. the period
// between the last aspect the Sun makes before the Sun enters the next sign)
// instead of void of course Moons, do:
//     ~dv "=z ?: @v And Equ @w O_Sun Equ @x -1 And Equ @w O_Sun Gt @x 0"
run { ~dv { z = v ? w == O_Sun & x == -1 : w == O_Sun & x > 0; } }
run { ~dv { z = w == O_Sun & (v ? x == -1 : x > 0); } }

///////////////////////////////////////////////////////////////////////////////
// ~t <string>: Filter transit to natal events.
// For example, to only display transit events taking place on weekends, do:
//     ~t "=a DayWeek Mon Day Yea Or Equ @a 0 Equ @a 6"
run { ~t { a = DayWeek(Mon(), Day(), Yea()); a == 0 | a == 6; } }

///////////////////////////////////////////////////////////////////////////////
// ~O <string>: Adjust object position.
// For example, to invert all zodiac positions 180 degrees for charts in the
// southern hemisphere located south of the equator, do:
// NOTE: the astrolog 7.60 example is incorrect (from 7.00)
//     ~O "If Lt Lat 0.0 =w Add @w 180.0"  // corrected example
run { ~O { if(Lat() < 0.0) w += 180.0; } }

///////////////////////////////////////////////////////////////////////////////
// ~C <string>: Adjust house cusp position.
// For example, Astrolog supports Null houses or the “0 Aries” system, an equal
// house system in which the 1st house cusp is always 0Aries. Suppose you want
// a “0 Leo” house system in which the 1st house cusp is always 0 Leo?
// This can be done with:
//     ~C "=y Mul Sub Add S_Leo @x 2 30.0"
run { ~C { y = (S_Leo + x - 2) * 30.0; } }

///////////////////////////////////////////////////////////////////////////////
// ~A <string>: Redefine aspect orb. For example,
// to have separating aspects have 70% the orb of applying aspects, do:
//     ~A "If Gt @y 0.0 =z Mul @z 0.70"
run { ~A { if(y > 0.0) z *= .70; } }

///////////////////////////////////////////////////////////////////////////////
// ~p[0] <string>: Adjust progression.
// For example, to have progressions move at a logarithmic rate (fast early in
// life, and continually slowing down over time) in the manner presented by
// A.T. Mann, do:
//     ~p0 "=z Mul Sgn2 Sub @x @y Sub Mul Log10 Add Div Div Abs Sub @x @y 365.242199 0.076661459 10 120 120"
run { ~p0 { z = Sgn2(x - y)
            * (Log10(Abs(x - y) / 365.242199 / 0.076661459 + 10) * 120 - 120); } }

///////////////////////////////////////////////////////////////////////////////
// ~kO <string>: Customize object color. For example, to make
// planets colored the same as the zodiac sign they’re located within, do:
//     ~kO "=z ObjCol Dec Add O_Asc LonSign ObjLon @y"
run { ~k0 { z = ObjCol(O_Asc + LonSign(ObjLon(y)) - 1); } }

///////////////////////////////////////////////////////////////////////////////
// ~kA <string>: Customize aspect color. For example,
// to change the color of aspect lines involving the Sun or Moon to magenta, do:
//     ~kA "If Or Lte @w O_Moo Lte @y O_Moo =z K_Mag"
run { ~kA { if(w <= O_Moo | y <= O_Moo) z = K_Mag; } }

///////////////////////////////////////////////////////////////////////////////
// ~kv <string>: Adjust wheel section color.
// For example, to give signs colors of the rainbow, but with red starting at
// the Sun’s position in the zodiac, do:
//     ~kv "If Equ @x 0 =z Blend _YXk ?: _Xr K_White K_Black Hue Sub Mul Dec @y 30 ObjLon O_Sun Div _XI1 100.0"
run { ~kv { if(x == 0) z = Blend(_YXk(_Xr() ? K_White : K_Blak),
                                 Hue((y - 1) * 30 - ObjLon(O_Sun)),
                                 _XI1() / 100.0);
} }

///////////////////////////////////////////////////////////////////////////////
// ~F[O/C/A] <string>: Font adjustment.
// For example, to randomly display sign glyphs using one of the first three
// fonts available, do:
//     ~F "=w Rnd 1 3 =v Add @u ?: Equ @w 1 93 ?: Equ @w 2 64 ?: Lte @u 9 48 ?: Equ @u 10 38 ?: Equ @u 11 34 49"
run { ~F { w = Rnd(1, 3);
           v = u + (w == 1 ? 93 : w == 2 ? 64 : u <= 9 ? 48
                    : u == 10 ? 38 : u == 11 ? 34 : 49);
} }

///////////////////////////////////////////////////////////////////////////////
// ~v <string>: Adjust object ordering.
// For example, to always display Ceres between Mars and Jupiter
// (instead of after all the main planets) do:
//     ~v "If Equ @z O_Cer =z O_Mar"
run { ~v { if(z == O_Cer) z = O_Mar; } }

///////////////////////////////////////////////////////////////////////////////
// ~v3 <string>: Adjust sign division.
// For example, to mark terms using the Chaldean method, in which the five
// subdivisions of each sign are progressively one degree smaller, do:
//     ~v3 "=a 64735 =b 47356 =c 73564 =d 56473 =w Sub 8 @y =z Mod Div Var Inc Mod Dec @x 4 Pow 10 Sub 4 @y 10"
run { ~v3 { a = 64735; b = 47356; c = 73564; d = 56473;
            w = 8 - y;
            // Since "*" doesn't take expr, cheat and use "Var()".
            z = Var((x - 1) % 4 + 1) / Pow(10, 4 - y) % 10;
            // Using a temp could do:
} }
// Using a temp could do:
run { ~v3 { a = 64735; b = 47356; c = 73564; d = 56473;
            w = 8 - y;
            p = (x - 1) % 4 + 1;
            z = *p / Pow(10, 4 - y) % 10;
} }

///////////////////////////////////////////////////////////////////////////////
// ~XL <string>: Adjust city color.
// For example, to only draw those cities within 45 degrees of the chart
// location, do:
//     ~XL "If Gt PolDist Lon Lat @x @y 45 =z -1"
run { ~XL { if(PolDist(Lon(), Lat(), x, y) > 45) z = -1; } }

///////////////////////////////////////////////////////////////////////////////
// ~Xt <string>: Notify sidebar.
// For example, if you want the current obliquity of the ecliptic and the
// right ascension of the MC to always be displayed in the sidebar, do:
//     -YXt "Obliquity: \A\nRAMC: \B" ~Xt "=a Oblique =b RAMC"
run { -YXt "Obliquity: \A\nRAMC: \B" ~Xt { a = Oblique(); b = RAMC(); } }

///////////////////////////////////////////////////////////////////////////////
// ~XQ <string>: Adjust key.
// For example, to disable the Escape and Ctrl+c keys so they don’t exit the
// program, do:
//     ~XQ "If Or Equ @z 27 Equ @z 3 =z -1"
run { ~XQ { if(z == 27 | z == 3) z = -1; } }

///////////////////////////////////////////////////////////////////////////////
// ~WQ <string>: Adjust menu command.
// For example, to make the w/a/s/d keys behave the same as the arrow keys, do:
//     ~WQ "If Equ @z 40082 =z 40289 If Equ @z 40131 =z 40244 If Equ @z 40281 =z 40290 If Equ @z 40086 =z 40243"
// NOTE: WINDOWS only
run { ~WQ { if(z == 40082) z = 40289;
            if(z == 40131) z = 40244;
            if(z == 40281) z = 40290;
            if(z == 40086) z = 40243;
} }

///////////////////////////////////////////////////////////////////////////////
// ~U <string>: Filter extra star output.
// For example, to only display stars brighter than magnitude 3.0
// (which will reduce the number of stars from over 1000 to 172) do:
//     ~U "Lt @z 3.0"
run { ~U { z < 3.0; } }

///////////////////////////////////////////////////////////////////////////////
// ~U0 <string>: Filter extra asteroid output.
// For example, to only display asteroids that are located within
// 10 great circle degrees from the Sun, do:
//     ~U0 "Lt PolDist @x @y ObjLon O_Sun ObjLat O_Sun 10.0"
run { ~U0 { PolDist(x, y, ObjLon(O_Sun), ObjLat(O_Sun)) < 10.0; } }

///////////////////////////////////////////////////////////////////////////////
// ~q[1-2] <string>: Notify chart cast.

///////////////////////////////////////////////////////////////////////////////
// ~Q[1-3] <string>: Notify chart display.
// See https://github.com/errael/astrology-castro/blob/main/examples.d/mazegame.castro

///////////////////////////////////////////////////////////////////////////////
// ~5s <string>: Adjust chart list custom sort order.
// For example, to sort by Sun/Moon angle (which will place New Moon charts
// first in the list and Full Moon charts last) do:
//     ~5s "LonDist ObjLon O_Sun ObjLon O_Moo" -5s
run { ~5s { LonDist(ObjLon(O_Sun), ObjLon(O_Moo)); } -5s }

///////////////////////////////////////////////////////////////////////////////
// ~5f <string>: Adjust chart list custom filter.
// For example, to only show charts from the chart list which have the “Moon
// in the 7th house and Jupiter aligned [Conjunct] with Mars”, do:
//     ~5f "And Equ ObjHouse O_Moo 7 Equ AspLon O_Jup O_Mar -1 A_Con" -5f "" ""
run { ~5f { ObjHouse(O_Moo) == 7 & AspLon(O_Jupi, O_Mar, -1) == A_Con; } -5f "" "" }

///////////////////////////////////////////////////////////////////////////////
// ~5Y <string>: Notify chart list enumeration.
// For example, to check which chart in the chart list forms the most Trine
// aspects to a natal chart (i.e. to transfer that chart to slot #2), first
// load the natal chart in slot #1, then do:
// DOC BUG: there is no -qL2 switch command (AFAICT)
//     ~5Y "DoGrid2 False =c 0 For %i 0 Objs If ObjOn @i For %j 0 Objs If ObjOn @j Do =e GridNam @i @j If Equ @e A_Tri =c Inc @c If Gt @c @d Do =d @c =a List1" ~1 "=d 0" -Y52 -qL2 ~@a
run {
    ~5Y {
        DoGrid2(false);
        c = 0;
        for(i = 0; Objs())
            if(ObjOn(i))
                for(j = 0; Objs())
                    if(ObjOn(j)) {
                        e = GridNam(i, j);
                        if(e == A_Tri) c += 1;
                    }
        if(c > d) { d = c; a = List1(); }
    }
    ~1 { d = 0; }
    -Y52
    -qL2 {~ a; }
}

///////////////////////////////////////////////////////////////////////////////
// ~5i <string>: Filter Astrodatabank import.
// For example, to only load ADB chart records for people who have at least
// three different psychological conditions at the same time, do:
//     ~2 1 ">Diagnoses : Psychological :"
//     -Y5I 1 1 -~5i "Gte @a 3"
run {
    SetString a ">Diagnoses : Psychological :"  // castro BUG %a
    -Y5I 1 1 -~5i { a >= 3; }
}

///////////////////////////////////////////////////////////////////////////////
// ~2[0] <index> <string>: String and string list setting.
// For example, to set custom string 4 to “Apple”, 5 to “Banana”, and 6
// to “Carrot”, do:
//     ~20 4 ";Apple;Banana;Carrot"
run { SetString d "Apple" "Banana" "Carrot" }
var g[] { "Apple", "Banana", "Carrot" };

///////////////////////////////////////////////////////////////////////////////
// ~0: Disable AstroExpressions.
// The ~0 switch disables all AstroExpression hooks in the current program
// session, which means “_~0” can be used to reenable them.
//     ~0
//     _~0
run { ~0 }
run { _~0 }

///////////////////////////////////////////////////////////////////////////////
// command switches can use AstroExpressions.
//     =R "~=b 0 For %a 0 Objs If ObjOn @a Do =b @a =a Objs @b"
run { =R {~ b = 0; for(a = 0; Objs()) if(ObjOn(a)) { b = a; a = Objs(); }; b; } }

